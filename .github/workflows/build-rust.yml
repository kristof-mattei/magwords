# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Rust

on:
  workflow_call:

permissions:
  contents: read

env:
  CARGO_FEATURES: --all-features
  RUSTFLAGS: --deny=warnings

jobs:
  warm-up-cache:
    name: Warm up the cache
    runs-on: ubuntu-latest
    steps:
      - name: TODO
        run: echo TODO

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - &checkout
        name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false

      - name: Check if we actually made changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
      - warm-up-cache
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.rust) == true
    steps:
      - *checkout

      - &cache_cargo
        name: Cache cargo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          CACHE_NAME: cargo
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - &cache_target
        name: Cache target
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          CACHE_NAME: target
        with:
          path: |
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - &set_up_mold
        name: Set up mold
        uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1

      - &set_up_toolchain
        name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Build
        shell: bash
        run: |
          cargo build ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs:
      - changes
      - warm-up-cache
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.rust) == true
    steps:
      - *checkout

      - *cache_cargo

      - *set_up_mold

      - *set_up_toolchain

      - name: Install rustfmt
        shell: bash
        run: |
          rustup component add rustfmt

          # restore symlinks
          rustup update

      - name: Check formatting
        shell: bash
        run: |
          cargo fmt --all -- --check --verbose

  cargo-test-and-report:
    name: Cargo test (and report)
    runs-on: ubuntu-latest
    needs:
      - warm-up-cache
    permissions:
      checks: write
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - *checkout

      - *cache_cargo

      - *cache_target

      - *set_up_mold

      - *set_up_toolchain

      - name: Install llvm-tools
        shell: bash
        run: |
          rustup component add llvm-tools

          # restore symlinks
          rustup update

      - &get_binstall
        name: Get binstall
        shell: bash
        working-directory: /tmp
        run: |
          case ${{ runner.arch }} in
            X64)
              full_platform="x86_64"
              ;;
            ARM64)
              full_platform="aarch64"
              ;;
          esac

          archive="cargo-binstall-${full_platform}-unknown-linux-musl.tgz"
          wget \
            --output-document=- \
            --timeout=10 \
            --waitretry=3 \
            --retry-connrefused \
            --progress=dot:mega \
            "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}" \
            | tar \
                --directory=${HOME}/.cargo/bin/ \
                --strip-components=0 \
                --no-overwrite-dir \
                --extract \
                --verbose \
                --gunzip \
                --file=-

      - name: Install nextest, custom test runner, with native support for junit and grcov
        shell: bash
        run: |
          cargo binstall --github-token ${{ secrets.GITHUB_TOKEN }} --no-confirm cargo-nextest grcov

      - name: Build with instrumentation support
        shell: bash
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          # build-* ones are not parsed by grcov
          LLVM_PROFILE_FILE: "profiling/build-%p-%m.profraw"
        run: |
          cargo build ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

      - name: Run nextest
        shell: bash
        id: tests
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          LLVM_PROFILE_FILE: "profiling/profile-%p-%m.profraw"
        run: |
          cargo nextest run --profile ci --no-fail-fast ${{ env.CARGO_FEATURES }} --all-targets --workspace
        continue-on-error: true

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@34d7c956a59aed1bfebf31df77b8de55db9bbaaf # v2.21.0
        with:
          check_name: Test results for Rust
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            reports/results.xml

      - name: Run grcov
        shell: bash
        run: |
          grcov $(find . -name "profile-*.profraw" -print) \
            --binary-path ./target/debug/ \
            --branch \
            --ignore-not-existing \
            --keep-only "src/**" \
            --llvm \
            --output-path ./reports/lcov.info \
            --output-type lcov \
            --source-dir ./back-end/

      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          disable_search: true
          disable_telem: true
          fail_ci_if_error: true
          flags: back-end
          files: reports/lcov.info
          plugins: ""
          use_oidc: true

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          disable_search: true
          # doesn't exist here... yet
          # disable_telem: true
          fail_ci_if_error: true
          flags: back-end
          files: reports/results.xml
          use_oidc: true

      - name: Fail if tests failed
        shell: bash
        if: |
          steps.tests.outcome != 'success'
        run: |
          # the test reporter we use (or any for that matter)
          # all show a report. But we cannot depend on that report because
          # we don't know which subsection it belongs in GitHub
          # so we explicitly fail this one
          # which will fail All Done
          exit 1

  cargo-clippy-and-report:
    name: Cargo clippy (and report)
    runs-on: ubuntu-latest
    needs:
      - changes
      - warm-up-cache
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.rust) == true
    steps:
      - *checkout

      - *cache_cargo

      - *cache_target

      - *set_up_mold

      - *set_up_toolchain

      - name: Run Clippy for GitHub Actions report
        uses: actions-rs-plus/clippy-check@fe8905c5766416f0593a503a2230a7c83141a8f0 # v2.3.0
        with:
          args: ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

  all-done:
    name: Rust All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - cargo-build
      - cargo-clippy-and-report
      - cargo-fmt
      - cargo-test-and-report
    if: |
      always()
    steps:
      - name: Fail!
        shell: bash
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
        run: |
          echo "One / more upstream failed or was cancelled. Failing job..."

          exit 1

      - name: Success!
        shell: bash
        run: |
          echo "Great success!"
